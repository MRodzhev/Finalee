version: 0.2

env:
  variables:
    CI: "true"
    REPOSITORY_REGION: "eu-central-1"
    ENV: "project"
    APP_NAME: "simpleapp"
    TERRAFORM_VERSION: "1.3.5"

phases:
  pre_build:
    commands:
      - curl -sSL "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip" -o terraform.zip
      - unzip terraform.zip -d /usr/local/bin && chmod +x /usr/local/bin/terraform
      - export REGISTRY_ID=`aws sts get-caller-identity --output text | awk '{print $1}'`
      - export REPO_NAME="${REGISTRY_ID}.dkr.ecr.${REPOSITORY_REGION}.amazonaws.com/${APP_NAME}-${ENV}-${NAME_CONTAINER}"
      - pip install jq
      - echo "Getting existing tag"
      - export SERVICE_ARN=$(aws ecs list-services --cluster Cluster | jq -r .serviceArns[])
      - export TASKDEF_ARN=$(aws ecs describe-services --cluster Cluster --service ${SERVICE_ARN} | jq -r .services[].taskDefinition)
      - export EXISTING_TAG=$(aws ecs describe-task-definition --task-definition ${TASKDEF_ARN} | jq -r .taskDefinition.containerDefinitions[].image | tr ':' ' ' | awk '{print $2}')
      - echo "Current version is ${EXISTING_TAG}"

  build:
    commands:
      - echo "Build and push docker images"
      - cd "${CODEBUILD_SRC_DIR}/app"
      - export image_tag="0.0.1"
      - echo "Building version ${image_tag}"
      - make build

      - cd ${CODEBUILD_SRC_DIR}
      - terraform init 
      - terraform plan -target=module.ecs --var-file="terraform.tfvars" -var="image_tag=0.0.1" -no-color -input=false -out plan.out
      - terraform apply -auto-approve -no-color -input=false plan.out

  post_build:
    commands:
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING != 0 ]; then
          NEWTAG=''
          while [ "${NEW_TAG}" != "${image_tag}" ];
          do
            NEW_SERVICE_ARN=$(aws ecs list-services --cluster Cluster | jq -r .serviceArns[])
            NEW_TASKDEF_ARN=$(aws ecs describe-services --cluster Cluster --service ${NEW_SERVICE_ARN} | jq -r .services[].taskDefinition)
            NEW_TAG=$(aws ecs describe-task-definition --task-definition ${NEW_TASKDEF_ARN} | jq -r .taskDefinition.containerDefinitions[].image | tr ':' ' ' | awk '{print $2}')
            echo "Waiting until new image started... Tag: ${image_tag} New tag: ${NEW_TAG}"
            if [ "${NEW_TAG}" != ${image_tag} ]; then
              sleep 10
            fi
          done
        else
          echo "Build failed"
        fi
      - echo "Cluster has been deployed"